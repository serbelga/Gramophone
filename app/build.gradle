apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

android {
    compileSdkVersion 31
    defaultConfig {
        applicationId "com.android.sergiobelda.gramophone"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "LASTFM_API_KEY", localProperties['LASTFM_KEY'])
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    viewBinding {
        enabled = true
    }
}

configurations {
    ktlint
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.core:core-ktx:$ktx_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    // Constraint Layout - Motion Layout
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"
    // Fragment KTX
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"
    // Preference KTX
    implementation "androidx.preference:preference-ktx:$preference_ktx_version"
    // Palette KTX
    implementation "androidx.palette:palette-ktx:$palette_ktx_version"
    // Test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.1-alpha01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0-alpha01'
    // Material Design
    implementation "com.google.android.material:material:$material_version"
    // Navigation KTX
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    // Recycler View
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    // Collection KTX
    implementation "androidx.collection:collection-ktx:$collection_ktx_version"
    // Annotation
    implementation "androidx.annotation:annotation:$annotation_version"
    // Android Architecture Components
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0-alpha03'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.0-alpha03'
    implementation 'androidx.lifecycle:lifecycle-livedata-core-ktx:2.4.0-alpha03'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    // Retrofit
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"

    implementation "androidx.media2:media2:$media2_version"
    implementation "androidx.media2:media2-common:$media2_common_version"

    // Exoplayer
    implementation "com.google.android.exoplayer:exoplayer:$exoplayer_version"

    implementation('io.coil-kt:coil:1.3.2')

    // Dagger Hilt
    implementation "com.google.dagger:hilt-android:2.38.1"
    kapt "com.google.dagger:hilt-compiler:2.38.1"

    ktlint("com.pinterest:ktlint:0.42.1")
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // to add a baseline to check against prepend following args:
    // "--baseline=ktlint-baseline.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}
